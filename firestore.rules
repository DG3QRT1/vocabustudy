rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function isPublic() {
    	return resource != null && resource.data.public == true;
    }
    function isCreator() {
    	return resource != null && request.auth != null && request.auth.token.email_verified && (resource.data.uid == request.auth.uid || request.auth.token.admin == true);
    }
    function isNotImpersonating(bypassName) {
    	return request.auth != null && request.auth.token.email_verified && request.resource != null && (request.auth.token.admin == true || (request.resource.data.uid == request.auth.uid && (bypassName || request.resource.data.creator == request.auth.token.name || request.resource.data.creator == "Anonymous")));
    }
    function onlyUpdated(keys) {
    	return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }
    function isBigEnough() {
      return request.resource.data.terms.size() >= 1;
    }
    function canAdminDelete() {
      return !request.auth.token.admin || resource.data.uid == request.auth.uid || request.auth.uid != "indXd3yqrqVZw07LCWHnTm69ZAg1";
    }
    match /sets/{set_id} {
      allow read: if isPublic() || isCreator();
      allow delete: if isCreator() && canAdminDelete();
      allow update: if isCreator() && onlyUpdated(["name", "public", "terms", "description"]) && isBigEnough();
      allow create: if request.resource.data.keys().hasAll(["name", "public", "uid", "terms"]) && request.resource.data.keys().hasOnly(["name", "public", "uid", "terms", "description"]) && isNotImpersonating(true) && isBigEnough();
      match /social/{uid} {
        allow list, get: if true;
        allow delete: if uid == request.auth.uid;
        allow create, update: if uid == request.auth.uid && request.resource.data.keys().hasOnly(["name", "comment", "like", "leaderboard", "uid"]) && request.auth.uid == request.resource.data.uid && request.resource.data.name == request.auth.token.name;
      }
    }
    match /meta_sets/{set_id} {
      allow read: if isPublic() || isCreator();
      allow delete: if isCreator() && canAdminDelete();
      allow update: if isCreator() && onlyUpdated(["name", "nameWords", "public", "numTerms", "creator", "collections"]) && isNotImpersonating(false);
      allow create: if request.resource.data.keys().hasAll(["creator", "nameWords", "name", "public", "uid", "numTerms", "collections"]) && request.resource.data.keys().hasOnly(["numTerms", "nameWords", "creator", "name", "public", "uid", "collections", "likes"]) && request.resource.data.likes == 0 && isNotImpersonating(false);
    }
    match /collections/{collection_id} {
      allow read: if true;
      allow delete: if isCreator();
      allow create: if request.resource.data.keys().hasAll(["name", "uid", "sets"]) && request.resource.data.keys().hasOnly(["name", "uid", "sets"]) && isNotImpersonating(true);
      allow update: if isCreator() && onlyUpdated(["name", "sets"]);
    }
    match /{path=**}/social/{uid} {
      allow list: if request.auth != null && request.auth.token.email_verified && request.auth.uid == resource.data.uid;
    }
  }
}